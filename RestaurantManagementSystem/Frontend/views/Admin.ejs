<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - Restaurant Management System</title>
    <link rel="stylesheet" href="/assets/css/admin.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous"> -->
</head>

<body>
    <div class="container mt-5">
        <h1 class="text-center">Restaurant Admin Dashboard</h1>

        <h2 class="mt-5">Ongoing Tables</h2>
        <ul id="ongoingTablesList" class="list-group">
            <% ongoingTables.forEach(table=> { %>
                <li class="list-group-item d-flex flex-column">
                    <div class="table-details d-flex justify-content-between align-items-center">
                        <div>
                            <span><strong>Table Number:</strong>
                                <%= table.Table_Number %>
                            </span><br>
                            <span><strong>Status:</strong>
                                <%= true %>
                            </span><br>
                            <span><strong>Total Quantity : </strong>
                                <%= table.Total_Quantity%>
                            </span><br>
                            <span><strong>Total Revenue : </strong> ₹<%= table.Total_Amount %></span>
                        </div>
                        <div>
                            <!-- Buttons grouped together -->
                            <a href="/ShowItems<%= table.Number %>">
                                <button class="btn btn-info btn-sm mr-2 toggleItems" data-id="<%= table._id %>">Show Items</button>
                            </a>
                            
                            <button class="btn btn-danger btn-sm endTable" data-id="<%= table._id %>"
                                onclick=EndTable(event)>CheckOut</button>
                        </div>
                    </div>
                </li>
                <% }) %>
        </ul>



        <!-- <div class="toast" role="alert" aria-live="assertive" aria-atomic="true" id="myToast"
            style="position: absolute; top: 20px; right: 20px; display: none;">
            <div class="toast-header">
                <img src="..." class="rounded me-2" alt="...">
                <strong class="me-auto">Bootstrap</strong>
                <small class="text-body-secondary">Just now</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                Hello, world! This is a toast message.
            </div>
        </div> -->

        <!-- Table Management -->
        <h2>Manage Tables</h2>
        <div id="addTableFormContainer">
            <div class="form-group">
                <label for="tableName">Table Name:</label>
                <input type="text" class="form-control" id="tableName" required>
            </div>
            <button id="submitButton" class="btn btn-primary" onclick=AddTable()>Add Table</button>
        </div>

        <h3 class="mt-4">Existing Tables</h3>
        <ul id="tablesList" class="list-group">
            <% tables.forEach(table=> { %>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>Table Number: <%= table.Number %></span>
                    <span>Total Revenue: <%= table.Total_Revenue %></span>
                    <span>Status: <%= table.Status %></span>
                    <div>
                        <button class="btn btn-danger btn-sm deleteTable" data-id="<%= table._id %>">Delete</button>
                        <button class="btn btn-warning btn-sm updateTable" data-id="<%= table._id %>"
                            data-number="<%= table.Number %>" data-status="<%= table.Status %>">Update</button>
                    </div>
                </li>
                <% }) %>
        </ul>


        <!-- Item Management -->
        <h2 class="mt-5">Manage Menu Items</h2>
        <div id="addItemFormContainer">
            <div class="form-group">
                <label for="itemName">Item Name:</label>
                <input type="text" class="form-control" id="itemName" required>
            </div>
            <div class="form-group">
                <label for="itemPrice">Item Price:</label>
                <input type="number" class="form-control" id="itemPrice" required>
            </div>
            <div class="form-group">
                <label for="itemDescription">Item Description:</label>
                <textarea class="form-control" id="itemDescription" required></textarea>
            </div>
            <div class="form-group">
                <label for="itemImageLink">Image Link:</label>
                <input type="url" class="form-control" id="itemImageLink" required>
            </div>
            <button id="submitItemButton" class="btn btn-primary" onclick=ItemAdd()>Add Item</button>
        </div>

        <h3 class="mt-4">Existing Menu Items</h3>
        <ul id="itemsList" class="list-group">
            <% items.forEach(item=> { %>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>
                        <%= item.Name %> - ₹<%= item.Price.toFixed(2) %>
                    </span>
                    <div>
                        <button class="btn btn-danger btn-sm deleteItem" data-id="<%= item._id %>">Delete</button>
                        <button class="btn btn-warning btn-sm updateItem" data-id="<%= item._id %>"
                            data-name="<%= item.name %>" data-price="<%= item.price %>">Update</button>
                    </div>
                </li>
                <% }) %>
        </ul>
    </div>
    <!-- <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
        integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"
        integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script> -->
    <script>
        // function showToast() {
        //     const toastElement = document.getElementById('myToast');
        //     const toast = new bootstrap.Toast(toastElement); // Create a Bootstrap toast instance

        //     toastElement.style.display = 'block'; // Show the toast
        //     toast.show(); // Show the toast

        //     // Hide the toast after 1 second
        //     setTimeout(() => {
        //         toast.hide(); // Hide the toast
        //         toastElement.style.display = 'none'; // Optional: set display to none after hiding
        //     }, 3000);
        // }
        async function AddTable() {
            const Table = document.getElementById("tableName").value;
            const res = await fetch("/admin/AddTable", {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ Number: Table })

            })
            const data = await res.json();
            if (data.success) {
                // showToast();
                alert(data.message)
                window.location.reload();
            } else {
                alert(data.message)
            }
        }

        // Handle deleting tables
        document.querySelectorAll('.deleteTable').forEach(button => {
            button.addEventListener('click', function () {
                const tableId = this.getAttribute('data-id');
                fetch(`/admin/tables/${tableId}`, {
                    method: 'DELETE',
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Reload the page automatically after successful deletion
                            alert(data.message)
                            window.location.reload();
                        } else {
                            alert(data.message)
                        }
                    })
                    .catch(error => console.error('Error:', error));
            });
        });

        // Handle updating tables
        document.querySelectorAll('.updateTable').forEach(button => {
            button.addEventListener('click', function () {
                const tableId = this.getAttribute('data-id');
                const newName = prompt("Enter new table name:", this.getAttribute('data-name'));
                if (newName) {
                    fetch(`/admin/tables/${tableId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ Number: newName })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                alert(data.message)
                                window.location.reload()
                            } else {
                                alert(data.message)
                            }
                        })
                        .catch(error => console.error('Error:', error));
                }
            });
        });

        // Handle adding items

        async function ItemAdd() {
            const Name = document.getElementById('itemName').value;
            const Price = document.getElementById('itemPrice').value;
            const Description = document.getElementById('itemDescription').value;
            const Image = document.getElementById('itemImageLink').value;

            fetch('/admin/AddItem', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ Name: Name, Price: Price, Description: Description, Image: Image })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(data.message)
                        window.location.reload()
                    } else {
                        alert(data.message)
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        // Handle deleting items
        document.querySelectorAll('.deleteItem').forEach(button => {
            button.addEventListener('click', function () {
                const itemId = this.getAttribute('data-id');
                fetch(`/admin/items/${itemId}`, {
                    method: 'DELETE',
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert(data.message)
                            window.location.reload()
                        } else {
                            alert(data.message)
                        }
                    })
                    .catch(error => console.error('Error:', error));
            });
        });

        // Handle updating items
        document.querySelectorAll('.updateItem').forEach(button => {
            button.addEventListener('click', function () {
                const itemId = this.getAttribute('data-id');
                const Name = prompt("Enter new item name:", this.getAttribute('data-name'));
                const Price = prompt("Enter new item price:", this.getAttribute('data-price'));
                const Description = prompt("Enter new item Description:", this.getAttribute('data-price'));
                const Image = prompt("Enter new item image:", this.getAttribute('data-price'));
                if (Name || Price || Description || Image) {
                    fetch(`/admin/items/${itemId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ Name, Price, Description, Image })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                alert(data.message)
                                window.location.reload(data.message)
                            } else {
                                alert(data.message)
                            }
                        })
                        .catch(error => console.error('Error:', error));
                }
            });
        });

        async function EndTable(event) {
            const id = event.target.getAttribute('data-id')
            console.log(id);
            const res = await fetch('/admin/EndTable', {
                method: "PUT",
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ id })
            })
            const data=await res.json();
            if(data.success)
            {
                 alert(data.message)
                 window.location.reload()
            }else
            {
                alert(data.message)
            }

        }
    </script>
</body>

</html>